{"ast":null,"code":"// src/router.js\nimport React from'react';import{createBrowserRouter,RouterProvider,redirect,Navigate}from'react-router-dom';// Import `redirect`\nimport Login from'./components/Login';import SignUp from'./components/SignUp';import Chatbot from'./components/Chatbot';import ResetPassword from'./components/ResetPassword';import ForgotPassword from'./components/ForgotPassword';import Subscription from'./components/subscriptionScreen';// Import Subscription component\nimport Terms from'./components/terms';// Import Terms component\nimport{account}from'./appwriteConfig';// Ensure Appwrite configuration is correct\n// Loader function for authenticated routes\nimport{jsx as _jsx}from\"react/jsx-runtime\";const loader=async()=>{try{await account.get();// Check if the user is logged in\nreturn{};// User is authenticated, proceed to the route\n}catch{throw redirect('/login');// Redirect to login if not authenticated\n}};// Define routes\nconst router=createBrowserRouter([{path:\"/login\",element:/*#__PURE__*/_jsx(Login,{})},{path:\"/signup\",element:/*#__PURE__*/_jsx(SignUp,{})},{path:\"/reset-password\",element:/*#__PURE__*/_jsx(ResetPassword,{})// Ensure this route is correctly set\n},{path:\"/forgot-password\",element:/*#__PURE__*/_jsx(ForgotPassword,{})// Ensure this route is correctly set\n},{path:\"/subscription\",element:/*#__PURE__*/_jsx(Subscription,{})// Add a route for subscription page\n},{path:\"/terms\",// Add this line for the terms page\nelement:/*#__PURE__*/_jsx(Terms,{})// Ensure you have a Terms component\n},{path:\"/chatbot\",element:/*#__PURE__*/_jsx(Chatbot,{}),loader// Use loader to protect this route\n},{path:\"*\",element:/*#__PURE__*/_jsx(Navigate,{to:\"/login\",replace:true})// Redirect unknown paths to login\n}]);const AppRouter=()=>/*#__PURE__*/_jsx(RouterProvider,{router:router});export default AppRouter;","map":{"version":3,"names":["React","createBrowserRouter","RouterProvider","redirect","Navigate","Login","SignUp","Chatbot","ResetPassword","ForgotPassword","Subscription","Terms","account","jsx","_jsx","loader","get","router","path","element","to","replace","AppRouter"],"sources":["C:/Users/vaish/OneDrive/Documents/medbotsample/Frontned/src/Router.js"],"sourcesContent":["// src/router.js\r\n\r\nimport React from 'react';\r\nimport { createBrowserRouter, RouterProvider, redirect, Navigate } from 'react-router-dom'; // Import `redirect`\r\nimport Login from './components/Login';\r\nimport SignUp from './components/SignUp';\r\nimport Chatbot from './components/Chatbot';\r\nimport ResetPassword from './components/ResetPassword';\r\nimport ForgotPassword from './components/ForgotPassword';\r\nimport Subscription from './components/subscriptionScreen'; // Import Subscription component\r\nimport Terms from './components/terms'; // Import Terms component\r\nimport { account } from './appwriteConfig'; // Ensure Appwrite configuration is correct\r\n\r\n// Loader function for authenticated routes\r\nconst loader = async () => {\r\n  try {\r\n    await account.get(); // Check if the user is logged in\r\n    return {}; // User is authenticated, proceed to the route\r\n  } catch {\r\n    throw redirect('/login'); // Redirect to login if not authenticated\r\n  }\r\n};\r\n\r\n// Define routes\r\nconst router = createBrowserRouter([\r\n  {\r\n    path: \"/login\",\r\n    element: <Login />,\r\n  },\r\n  {\r\n    path: \"/signup\",\r\n    element: <SignUp />,\r\n  },\r\n  {\r\n    path: \"/reset-password\",\r\n    element: <ResetPassword />, // Ensure this route is correctly set\r\n  },\r\n  {\r\n    path: \"/forgot-password\",\r\n    element: <ForgotPassword />, // Ensure this route is correctly set\r\n  },\r\n  {\r\n    path: \"/subscription\",\r\n    element: <Subscription />, // Add a route for subscription page\r\n  },\r\n  {\r\n    path: \"/terms\", // Add this line for the terms page\r\n    element: <Terms />, // Ensure you have a Terms component\r\n  },\r\n  {\r\n    path: \"/chatbot\",\r\n    element: <Chatbot />,\r\n    loader, // Use loader to protect this route\r\n  },\r\n  {\r\n    path: \"*\",\r\n    element: <Navigate to=\"/login\" replace />, // Redirect unknown paths to login\r\n  },\r\n]);\r\n\r\nconst AppRouter = () => (\r\n  <RouterProvider router={router} />\r\n);\r\n\r\nexport default AppRouter;\r\n"],"mappings":"AAAA;AAEA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,mBAAmB,CAAEC,cAAc,CAAEC,QAAQ,CAAEC,QAAQ,KAAQ,kBAAkB,CAAE;AAC5F,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CACtC,MAAO,CAAAC,MAAM,KAAM,qBAAqB,CACxC,MAAO,CAAAC,OAAO,KAAM,sBAAsB,CAC1C,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CACtD,MAAO,CAAAC,cAAc,KAAM,6BAA6B,CACxD,MAAO,CAAAC,YAAY,KAAM,iCAAiC,CAAE;AAC5D,MAAO,CAAAC,KAAK,KAAM,oBAAoB,CAAE;AACxC,OAASC,OAAO,KAAQ,kBAAkB,CAAE;AAE5C;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,KAAM,CAAAC,MAAM,CAAG,KAAAA,CAAA,GAAY,CACzB,GAAI,CACF,KAAM,CAAAH,OAAO,CAACI,GAAG,CAAC,CAAC,CAAE;AACrB,MAAO,CAAC,CAAC,CAAE;AACb,CAAE,KAAM,CACN,KAAM,CAAAb,QAAQ,CAAC,QAAQ,CAAC,CAAE;AAC5B,CACF,CAAC,CAED;AACA,KAAM,CAAAc,MAAM,CAAGhB,mBAAmB,CAAC,CACjC,CACEiB,IAAI,CAAE,QAAQ,CACdC,OAAO,cAAEL,IAAA,CAACT,KAAK,GAAE,CACnB,CAAC,CACD,CACEa,IAAI,CAAE,SAAS,CACfC,OAAO,cAAEL,IAAA,CAACR,MAAM,GAAE,CACpB,CAAC,CACD,CACEY,IAAI,CAAE,iBAAiB,CACvBC,OAAO,cAAEL,IAAA,CAACN,aAAa,GAAE,CAAG;AAC9B,CAAC,CACD,CACEU,IAAI,CAAE,kBAAkB,CACxBC,OAAO,cAAEL,IAAA,CAACL,cAAc,GAAE,CAAG;AAC/B,CAAC,CACD,CACES,IAAI,CAAE,eAAe,CACrBC,OAAO,cAAEL,IAAA,CAACJ,YAAY,GAAE,CAAG;AAC7B,CAAC,CACD,CACEQ,IAAI,CAAE,QAAQ,CAAE;AAChBC,OAAO,cAAEL,IAAA,CAACH,KAAK,GAAE,CAAG;AACtB,CAAC,CACD,CACEO,IAAI,CAAE,UAAU,CAChBC,OAAO,cAAEL,IAAA,CAACP,OAAO,GAAE,CAAC,CACpBQ,MAAQ;AACV,CAAC,CACD,CACEG,IAAI,CAAE,GAAG,CACTC,OAAO,cAAEL,IAAA,CAACV,QAAQ,EAACgB,EAAE,CAAC,QAAQ,CAACC,OAAO,MAAE,CAAG;AAC7C,CAAC,CACF,CAAC,CAEF,KAAM,CAAAC,SAAS,CAAGA,CAAA,gBAChBR,IAAA,CAACZ,cAAc,EAACe,MAAM,CAAEA,MAAO,CAAE,CAClC,CAED,cAAe,CAAAK,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}