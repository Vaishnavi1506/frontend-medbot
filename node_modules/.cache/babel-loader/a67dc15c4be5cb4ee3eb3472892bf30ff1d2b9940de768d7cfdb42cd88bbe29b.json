{"ast":null,"code":"import{account}from'./appwriteConfig';import{ID}from'appwrite';// Utility function for validating email format\nconst isValidEmail=email=>{const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);};// Sign up function\nexport const signUp=async(email,password)=>{try{email=email.trim();if(!isValidEmail(email))throw new Error('Invalid email format.');if(password.length<6)throw new Error('Password must be at least 6 characters long.');console.log('Attempting to create user with email:',email);const user=await account.create(ID.unique(),email,password);console.log('User created:',user);return user;}catch(error){console.error('Signup failed:',error.message);if(error.message.includes('User already exists')){throw new Error('An account with this email already exists.');}throw new Error(`Signup failed: ${error.message}`);}};// Login function\nexport const login=async(email,password)=>{try{email=email.trim();if(!isValidEmail(email))throw new Error('Invalid email format.');if(password.length<6)throw new Error('Password must be at least 6 characters long.');// Attempt to log in\nconsole.log('Attempting to log in with email:',email);// Try to delete all active sessions, but ignore errors related to missing sessions or scopes\ntry{await account.deleteSessions();console.log('Deleted all active sessions');}catch(err){console.warn('No active sessions found or insufficient scope:',err.message);}// Create a new session after deleting any existing ones\nconst session=await account.createEmailPasswordSession(email,password);console.log('Session created:',session);return session;}catch(error){console.error('Login failed:',error.message);if(error.message.includes('Invalid credentials')){throw new Error('Invalid email or password.');}else if(error.message.includes('Missing scope')){throw new Error('Authentication error. Please check your API key and permissions.');}throw new Error(`Login failed: ${error.message}`);}};// Get user function\nexport const getUser=async()=>{try{const user=await account.get();console.log('User retrieved:',user);return user;}catch(error){console.error('Get user failed:',error.message);return null;}};// Logout function\nexport const logout=async()=>{try{await account.deleteSession('current');console.log('Logged out successfully');}catch(error){console.error('Logout failed:',error.message);throw new Error(`Logout failed: ${error.message}`);}};export const requestPasswordReset=async email=>{try{email=email.trim();if(!isValidEmail(email))throw new Error('Invalid email format.');// Use the current origin for the redirect URL\nconst redirectURL=`${window.location.origin}/reset-password`;await account.createRecovery(email,redirectURL);console.log('Password reset link sent to email:',email);}catch(error){console.error('Error requesting password reset:',error.message);throw new Error('Failed to send password reset link.');}};export const resetPasswordWithToken=async(userId,secret,newPassword)=>{try{await account.updateRecovery(userId,secret,newPassword,newPassword);console.log('Password successfully reset.');}catch(error){console.error('Error resetting password:',error.message);throw new Error('Failed to reset password.');}};","map":{"version":3,"names":["account","ID","isValidEmail","email","emailRegex","test","signUp","password","trim","Error","length","console","log","user","create","unique","error","message","includes","login","deleteSessions","err","warn","session","createEmailPasswordSession","getUser","get","logout","deleteSession","requestPasswordReset","redirectURL","window","location","origin","createRecovery","resetPasswordWithToken","userId","secret","newPassword","updateRecovery"],"sources":["C:/Users/vaish/OneDrive/Documents/medbotsample/Frontned/src/authService.js"],"sourcesContent":["import { account } from './appwriteConfig';\r\nimport { ID } from 'appwrite';\r\n\r\n// Utility function for validating email format\r\nconst isValidEmail = (email) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n};\r\n\r\n// Sign up function\r\nexport const signUp = async (email, password) => {\r\n    try {\r\n        email = email.trim();\r\n        if (!isValidEmail(email)) throw new Error('Invalid email format.');\r\n        if (password.length < 6) throw new Error('Password must be at least 6 characters long.');\r\n\r\n        console.log('Attempting to create user with email:', email);\r\n        const user = await account.create(ID.unique(), email, password);\r\n        console.log('User created:', user);\r\n        return user;\r\n    } catch (error) {\r\n        console.error('Signup failed:', error.message);\r\n        if (error.message.includes('User already exists')) {\r\n            throw new Error('An account with this email already exists.');\r\n        }\r\n        throw new Error(`Signup failed: ${error.message}`);\r\n    }\r\n};\r\n\r\n// Login function\r\nexport const login = async (email, password) => {\r\n    try {\r\n        email = email.trim();\r\n        if (!isValidEmail(email)) throw new Error('Invalid email format.');\r\n        if (password.length < 6) throw new Error('Password must be at least 6 characters long.');\r\n\r\n        // Attempt to log in\r\n        console.log('Attempting to log in with email:', email);\r\n\r\n        // Try to delete all active sessions, but ignore errors related to missing sessions or scopes\r\n        try {\r\n            await account.deleteSessions();\r\n            console.log('Deleted all active sessions');\r\n        } catch (err) {\r\n            console.warn('No active sessions found or insufficient scope:', err.message);\r\n        }\r\n\r\n        // Create a new session after deleting any existing ones\r\n        const session = await account.createEmailPasswordSession(email, password);\r\n        console.log('Session created:', session);\r\n        return session;\r\n    } catch (error) {\r\n        console.error('Login failed:', error.message);\r\n        if (error.message.includes('Invalid credentials')) {\r\n            throw new Error('Invalid email or password.');\r\n        } else if (error.message.includes('Missing scope')) {\r\n            throw new Error('Authentication error. Please check your API key and permissions.');\r\n        }\r\n        throw new Error(`Login failed: ${error.message}`);\r\n    }\r\n};\r\n\r\n// Get user function\r\nexport const getUser = async () => {\r\n    try {\r\n        const user = await account.get();\r\n        console.log('User retrieved:', user);\r\n        return user;\r\n    } catch (error) {\r\n        console.error('Get user failed:', error.message);\r\n        return null;\r\n    }\r\n};\r\n\r\n// Logout function\r\nexport const logout = async () => {\r\n    try {\r\n        await account.deleteSession('current');\r\n        console.log('Logged out successfully');\r\n    } catch (error) {\r\n        console.error('Logout failed:', error.message);\r\n        throw new Error(`Logout failed: ${error.message}`);\r\n    }\r\n};\r\n\r\nexport const requestPasswordReset = async (email) => {\r\n    try {\r\n        email = email.trim();\r\n        if (!isValidEmail(email)) throw new Error('Invalid email format.');\r\n\r\n        // Use the current origin for the redirect URL\r\n        const redirectURL = `${window.location.origin}/reset-password`;\r\n\r\n        await account.createRecovery(email, redirectURL);\r\n        console.log('Password reset link sent to email:', email);\r\n    } catch (error) {\r\n        console.error('Error requesting password reset:', error.message);\r\n        throw new Error('Failed to send password reset link.');\r\n    }\r\n};\r\n\r\nexport const resetPasswordWithToken = async (userId, secret, newPassword) => {\r\n    try {\r\n        await account.updateRecovery(userId, secret, newPassword, newPassword);\r\n        console.log('Password successfully reset.');\r\n    } catch (error) {\r\n        console.error('Error resetting password:', error.message);\r\n        throw new Error('Failed to reset password.');\r\n    }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}