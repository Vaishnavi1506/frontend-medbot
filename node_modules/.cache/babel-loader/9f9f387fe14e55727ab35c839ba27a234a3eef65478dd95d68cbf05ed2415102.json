{"ast":null,"code":"import React,{useState}from'react';import{useNavigate}from'react-router-dom';import'./SubscriptionScreen.css';// Your custom CSS file\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const SubscriptionScreen=()=>{const[loading,setLoading]=useState(false);const navigate=useNavigate();const handleSubscription=async plan=>{let url;if(plan==='monthly'){url='https://buy.stripe.com/test_eVa9CVcc8gjLeB27st';}else if(plan==='annual'){url='https://buy.stripe.com/test_28odTbgso0kN0Kc4gg';}if(url){try{// Open the URL in a new tab\nwindow.open(url,'_blank');// Wait for user to complete payment and return\nif(window.confirm(\"After completing the payment, press OK to continue.\")){const isSubscribed=await checkSubscriptionStatus();if(isSubscribed){localStorage.setItem('isSubscribed','true');await saveSubscription(plan);navigate('/home');}else{alert(\"Subscription Failed: Please try again or contact support.\");}}setLoading(false);}catch(err){alert(\"Error: Failed to open the subscription page\");setLoading(false);}}};const saveSubscription=async plan=>{const now=new Date();let expiryDate;if(plan==='monthly'){expiryDate=new Date(now.setMonth(now.getMonth()+1));}else if(plan==='annual'){expiryDate=new Date(now.setFullYear(now.getFullYear()+1));}localStorage.setItem('subscriptionExpiry',expiryDate.toISOString());};const checkSubscriptionStatus=async()=>{// Simulating a delay\nawait new Promise(resolve=>setTimeout(resolve,1000));return true;// Replace this with actual logic to check subscription status\n};return/*#__PURE__*/_jsx(\"div\",{className:\"gradient-background\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"header\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"Choose Your Plan\"}),/*#__PURE__*/_jsx(\"p\",{className:\"subtitle\",children:\"Select the subscription that works best for you\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"plan-container\",children:[/*#__PURE__*/_jsxs(\"button\",{className:\"plan-button\",onClick:()=>handleSubscription('monthly'),disabled:loading,children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\uD83D\\uDCC5\"}),/*#__PURE__*/_jsx(\"h2\",{className:\"plan-title\",children:\"Monthly\"}),/*#__PURE__*/_jsx(\"p\",{className:\"plan-price\",children:\"$5.00/month\"})]}),/*#__PURE__*/_jsxs(\"button\",{className:\"plan-button annual-plan\",onClick:()=>handleSubscription('annual'),disabled:loading,children:[/*#__PURE__*/_jsx(\"span\",{className:\"icon\",children:\"\\uD83D\\uDCC5\"}),/*#__PURE__*/_jsx(\"h2\",{className:\"plan-title\",children:\"Annual\"}),/*#__PURE__*/_jsx(\"p\",{className:\"plan-price\",children:\"$50/year\"}),/*#__PURE__*/_jsx(\"p\",{className:\"savings-text\",children:\"Save 16.66%\"})]})]})]})});};export default SubscriptionScreen;","map":{"version":3,"names":["React","useState","useNavigate","jsx","_jsx","jsxs","_jsxs","SubscriptionScreen","loading","setLoading","navigate","handleSubscription","plan","url","window","open","confirm","isSubscribed","checkSubscriptionStatus","localStorage","setItem","saveSubscription","alert","err","now","Date","expiryDate","setMonth","getMonth","setFullYear","getFullYear","toISOString","Promise","resolve","setTimeout","className","children","onClick","disabled"],"sources":["C:/Users/vaish/OneDrive/Documents/medbotsample/Frontned/src/components/subscriptionScreen.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './SubscriptionScreen.css'; // Your custom CSS file\n\nconst SubscriptionScreen = () => {\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n\n  const handleSubscription = async (plan) => {\n    let url;\n\n    if (plan === 'monthly') {\n      url = 'https://buy.stripe.com/test_eVa9CVcc8gjLeB27st';\n    } else if (plan === 'annual') {\n      url = 'https://buy.stripe.com/test_28odTbgso0kN0Kc4gg';\n    }\n\n    if (url) {\n      try {\n        // Open the URL in a new tab\n        window.open(url, '_blank');\n\n        // Wait for user to complete payment and return\n        if (window.confirm(\"After completing the payment, press OK to continue.\")) {\n          const isSubscribed = await checkSubscriptionStatus();\n\n          if (isSubscribed) {\n            localStorage.setItem('isSubscribed', 'true');\n            await saveSubscription(plan);\n            navigate('/home');\n          } else {\n            alert(\"Subscription Failed: Please try again or contact support.\");\n          }\n        }\n        setLoading(false);\n      } catch (err) {\n        alert(\"Error: Failed to open the subscription page\");\n        setLoading(false);\n      }\n    }\n  };\n\n  const saveSubscription = async (plan) => {\n    const now = new Date();\n    let expiryDate;\n    if (plan === 'monthly') {\n      expiryDate = new Date(now.setMonth(now.getMonth() + 1));\n    } else if (plan === 'annual') {\n      expiryDate = new Date(now.setFullYear(now.getFullYear() + 1));\n    }\n    localStorage.setItem('subscriptionExpiry', expiryDate.toISOString());\n  };\n\n  const checkSubscriptionStatus = async () => {\n    // Simulating a delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    return true; // Replace this with actual logic to check subscription status\n  };\n\n  return (\n    <div className=\"gradient-background\">\n      <div className=\"container\">\n        <div className=\"header\">\n          <h1 className=\"title\">Choose Your Plan</h1>\n          <p className=\"subtitle\">Select the subscription that works best for you</p>\n        </div>\n\n        <div className=\"plan-container\">\n          <button\n            className=\"plan-button\"\n            onClick={() => handleSubscription('monthly')}\n            disabled={loading}\n          >\n            <span className=\"icon\">ðŸ“…</span>\n            <h2 className=\"plan-title\">Monthly</h2>\n            <p className=\"plan-price\">$5.00/month</p>\n          </button>\n\n          <button\n            className=\"plan-button annual-plan\"\n            onClick={() => handleSubscription('annual')}\n            disabled={loading}\n          >\n            <span className=\"icon\">ðŸ“…</span>\n            <h2 className=\"plan-title\">Annual</h2>\n            <p className=\"plan-price\">$50/year</p>\n            <p className=\"savings-text\">Save 16.66%</p>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SubscriptionScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}